// <auto-generated />
using System;
using DecalXeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DecalXeAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250722053006_AddLicensePlateToCustomerVehicle")]
    partial class AddLicensePlateToCustomerVehicle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.AdminDetail", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EmployeeID");

                    b.ToTable("AdminDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("text");

                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DecalXeAPI.Models.CustomerVehicle", b =>
                {
                    b.Property<string>("VehicleID")
                        .HasColumnType("text");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("InitialKM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ModelID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("VehicleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ModelID");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StandardWorkUnits")
                        .HasColumnType("integer");

                    b.HasKey("ServiceID");

                    b.HasIndex("DecalTypeID");

                    b.ToTable("DecalServices");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.Property<string>("TemplateID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TemplateID");

                    b.HasIndex("DecalTypeID");

                    b.ToTable("DecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalType", b =>
                {
                    b.Property<string>("DecalTypeID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("DecalTypeID");

                    b.ToTable("DecalTypes");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Deposit", b =>
                {
                    b.Property<string>("DepositID")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DepositID");

                    b.HasIndex("OrderID");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Design", b =>
                {
                    b.Property<string>("DesignID")
                        .HasColumnType("text");

                    b.Property<string>("AIModelUsed")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("DesignPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DesignURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DesignerID")
                        .HasColumnType("text");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DesignID");

                    b.HasIndex("DesignerID");

                    b.HasIndex("OrderID");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignComment", b =>
                {
                    b.Property<string>("CommentID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DesignID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentID")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommentID");

                    b.HasIndex("DesignID");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("SenderAccountID");

                    b.ToTable("DesignComments");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignWorkOrder", b =>
                {
                    b.Property<string>("WorkOrderID")
                        .HasColumnType("text");

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DesignID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WorkOrderID");

                    b.HasIndex("DesignID")
                        .IsUnique();

                    b.HasIndex("OrderID");

                    b.ToTable("DesignWorkOrders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignerDetail", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<int?>("PortfolioUrl")
                        .HasColumnType("integer");

                    b.Property<string>("Specialization")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("EmployeeID");

                    b.ToTable("DesignerDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StoreID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("StoreID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ManagerDetail", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<decimal?>("BudgetManaged")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeID");

                    b.ToTable("ManagerDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("AssignedEmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCustomDecal")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleID")
                        .HasColumnType("text");

                    b.HasKey("OrderID");

                    b.HasIndex("AssignedEmployeeID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("text");

                    b.Property<decimal?>("ActualAreaUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ActualLengthUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ActualWidthUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalCalculatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ServiceID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderStageHistory", b =>
                {
                    b.Property<string>("OrderStageHistoryID")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedByEmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("OrderStageHistoryID");

                    b.HasIndex("ChangedByEmployeeID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderStageHistories");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DecalXeAPI.Models.SalesPersonDetail", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("EmployeeID");

                    b.ToTable("SalesPersonDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Store", b =>
                {
                    b.Property<string>("StoreID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechLaborPrice", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("text");

                    b.Property<string>("VehicleModelID")
                        .HasColumnType("text");

                    b.Property<decimal>("LaborPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceID", "VehicleModelID");

                    b.HasIndex("VehicleModelID");

                    b.ToTable("TechLaborPrices");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechnicianDetail", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("Certifications")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeID");

                    b.ToTable("TechnicianDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleBrand", b =>
                {
                    b.Property<string>("BrandID")
                        .HasColumnType("text");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BrandID");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModel", b =>
                {
                    b.Property<string>("ModelID")
                        .HasColumnType("text");

                    b.Property<string>("BrandID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ModelID");

                    b.HasIndex("BrandID");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModelDecalTemplate", b =>
                {
                    b.Property<string>("VehicleModelDecalTemplateID")
                        .HasColumnType("text");

                    b.Property<string>("ModelID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicleModelDecalTemplateID");

                    b.HasIndex("ModelID");

                    b.HasIndex("TemplateID");

                    b.ToTable("VehicleModelDecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModelDecalType", b =>
                {
                    b.Property<string>("VehicleModelDecalTypeID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VehicleModelDecalTypeID");

                    b.HasIndex("DecalTypeID");

                    b.HasIndex("ModelID");

                    b.ToTable("VehicleModelDecalTypes");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Warranty", b =>
                {
                    b.Property<string>("WarrantyID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WarrantyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WarrantyStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WarrantyID");

                    b.HasIndex("OrderID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Warranties");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DecalXeAPI.Models.AdminDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithOne("AdminDetail")
                        .HasForeignKey("DecalXeAPI.Models.AdminDetail", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("DecalXeAPI.Models.Customer", "AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DecalXeAPI.Models.CustomerVehicle", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.VehicleModel", "VehicleModel")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalType", "DecalType")
                        .WithMany("DecalServices")
                        .HasForeignKey("DecalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalType");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalType", "DecalType")
                        .WithMany()
                        .HasForeignKey("DecalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalType");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Deposit", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Design", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Designer")
                        .WithMany("Designs")
                        .HasForeignKey("DesignerID");

                    b.HasOne("DecalXeAPI.Models.Order", null)
                        .WithMany("Designs")
                        .HasForeignKey("OrderID");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignComment", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Design", "Design")
                        .WithMany()
                        .HasForeignKey("DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.DesignComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DecalXeAPI.Models.Account", "SenderAccount")
                        .WithMany("DesignComments")
                        .HasForeignKey("SenderAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("ParentComment");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignWorkOrder", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Design", "Design")
                        .WithOne("DesignWorkOrder")
                        .HasForeignKey("DecalXeAPI.Models.DesignWorkOrder", "DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignerDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithOne("DesignerDetail")
                        .HasForeignKey("DecalXeAPI.Models.DesignerDetail", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("DecalXeAPI.Models.Employee", "AccountID");

                    b.HasOne("DecalXeAPI.Models.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Feedback", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ManagerDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithOne("ManagerDetail")
                        .HasForeignKey("DecalXeAPI.Models.ManagerDetail", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "AssignedEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedEmployeeID");

                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.CustomerVehicle", "CustomerVehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleID");

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Customer");

                    b.Navigation("CustomerVehicle");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.DecalService", "DecalService")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalService");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderStageHistory", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "ChangedByEmployee")
                        .WithMany("OrderStageHistories")
                        .HasForeignKey("ChangedByEmployeeID");

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("OrderStageHistories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByEmployee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Payment", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.SalesPersonDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithOne("SalesPersonDetail")
                        .HasForeignKey("DecalXeAPI.Models.SalesPersonDetail", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechLaborPrice", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalService", "DecalService")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalService");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechnicianDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithOne("TechnicianDetail")
                        .HasForeignKey("DecalXeAPI.Models.TechnicianDetail", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModel", b =>
                {
                    b.HasOne("DecalXeAPI.Models.VehicleBrand", "VehicleBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModelDecalTemplate", b =>
                {
                    b.HasOne("DecalXeAPI.Models.VehicleModel", "VehicleModel")
                        .WithMany("VehicleModelDecalTemplates")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.DecalTemplate", "DecalTemplate")
                        .WithMany("VehicleModelDecalTemplates")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalTemplate");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModelDecalType", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalType", "DecalType")
                        .WithMany("VehicleModelDecalTypes")
                        .HasForeignKey("DecalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.VehicleModel", "VehicleModel")
                        .WithMany("VehicleModelDecalTypes")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalType");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Warranty", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", null)
                        .WithMany("Warranties")
                        .HasForeignKey("OrderID");

                    b.HasOne("DecalXeAPI.Models.CustomerVehicle", "CustomerVehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerVehicle");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("DesignComments");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.CustomerVehicle", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.Navigation("VehicleModelDecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalType", b =>
                {
                    b.Navigation("DecalServices");

                    b.Navigation("VehicleModelDecalTypes");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Design", b =>
                {
                    b.Navigation("DesignWorkOrder");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DesignComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.Navigation("AdminDetail");

                    b.Navigation("DesignerDetail");

                    b.Navigation("Designs");

                    b.Navigation("ManagerDetail");

                    b.Navigation("OrderStageHistories");

                    b.Navigation("SalesPersonDetail");

                    b.Navigation("TechnicianDetail");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderStageHistories");

                    b.Navigation("Payments");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Store", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleBrand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("DecalXeAPI.Models.VehicleModel", b =>
                {
                    b.Navigation("CustomerVehicles");

                    b.Navigation("VehicleModelDecalTemplates");

                    b.Navigation("VehicleModelDecalTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
