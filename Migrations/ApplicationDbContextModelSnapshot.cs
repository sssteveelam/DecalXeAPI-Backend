// <auto-generated />
using System;
using DecalXeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DecalXeAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.CustomServiceRequest", b =>
                {
                    b.Property<string>("CustomRequestID")
                        .HasColumnType("text");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DesiredCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EstimatedWorkUnits")
                        .HasColumnType("integer");

                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SalesEmployeeID")
                        .HasColumnType("text");

                    b.HasKey("CustomRequestID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("SalesEmployeeID");

                    b.ToTable("CustomServiceRequests");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("text");

                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StandardWorkUnits")
                        .HasColumnType("integer");

                    b.HasKey("ServiceID");

                    b.HasIndex("DecalTypeID");

                    b.ToTable("DecalServices");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.Property<string>("TemplateID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TemplateID");

                    b.HasIndex("DecalTypeID");

                    b.ToTable("DecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalType", b =>
                {
                    b.Property<string>("DecalTypeID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("DecalTypeID");

                    b.ToTable("DecalTypes");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Design", b =>
                {
                    b.Property<string>("DesignID")
                        .HasColumnType("text");

                    b.Property<string>("AIModelUsed")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AIPrompt")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DesignURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DesignerID")
                        .HasColumnType("text");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DesignID");

                    b.HasIndex("DesignerID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("AccountID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StoreID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("StoreID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("AssignedEmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("AssignedEmployeeID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("text");

                    b.Property<string>("DecalServiceServiceID")
                        .HasColumnType("text");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("DecalServiceServiceID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PromotionID")
                        .HasColumnType("text");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PromotionID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Promotion", b =>
                {
                    b.Property<string>("PromotionID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PromotionID");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ScheduledWorkUnit", b =>
                {
                    b.Property<string>("ScheduledWorkUnitID")
                        .HasColumnType("text");

                    b.Property<string>("DailyScheduleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderID")
                        .HasColumnType("text");

                    b.Property<string>("SlotDefID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TimeSlotDefinitionSlotDefID")
                        .HasColumnType("text");

                    b.HasKey("ScheduledWorkUnitID");

                    b.HasIndex("DailyScheduleID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TimeSlotDefinitionSlotDefID");

                    b.ToTable("ScheduledWorkUnits");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ServiceDecalTemplate", b =>
                {
                    b.Property<string>("ServiceDecalTemplateID")
                        .HasColumnType("text");

                    b.Property<string>("DecalServiceServiceID")
                        .HasColumnType("text");

                    b.Property<string>("DecalTemplateTemplateID")
                        .HasColumnType("text");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceDecalTemplateID");

                    b.HasIndex("DecalServiceServiceID");

                    b.HasIndex("DecalTemplateTemplateID");

                    b.ToTable("ServiceDecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ServiceProduct", b =>
                {
                    b.Property<string>("ServiceProductID")
                        .HasColumnType("text");

                    b.Property<string>("DecalServiceServiceID")
                        .HasColumnType("text");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("QuantityUsed")
                        .HasColumnType("numeric");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceProductID");

                    b.HasIndex("DecalServiceServiceID");

                    b.HasIndex("ProductID");

                    b.ToTable("ServiceProducts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Store", b =>
                {
                    b.Property<string>("StoreID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechnicianDailySchedule", b =>
                {
                    b.Property<string>("DailyScheduleID")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAvailableWorkUnits")
                        .HasColumnType("integer");

                    b.HasKey("DailyScheduleID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TechnicianDailySchedules");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TimeSlotDefinition", b =>
                {
                    b.Property<string>("SlotDefID")
                        .HasColumnType("text");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("SlotDefID");

                    b.ToTable("TimeSlotDefinitions");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Warranty", b =>
                {
                    b.Property<string>("WarrantyID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WarrantyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WarrantyStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WarrantyID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Warranties");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DecalXeAPI.Models.CustomServiceRequest", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("CustomServiceRequests")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithOne("CustomServiceRequest")
                        .HasForeignKey("DecalXeAPI.Models.CustomServiceRequest", "OrderID");

                    b.HasOne("DecalXeAPI.Models.Employee", "SalesEmployee")
                        .WithMany("SalesRequests")
                        .HasForeignKey("SalesEmployeeID");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("SalesEmployee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("DecalXeAPI.Models.Customer", "AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalType", "DecalType")
                        .WithMany("DecalServices")
                        .HasForeignKey("DecalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalType");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalType", "DecalType")
                        .WithMany()
                        .HasForeignKey("DecalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalType");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Design", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Designer")
                        .WithMany("Designs")
                        .HasForeignKey("DesignerID");

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithOne("Design")
                        .HasForeignKey("DecalXeAPI.Models.Design", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("DecalXeAPI.Models.Employee", "AccountID");

                    b.HasOne("DecalXeAPI.Models.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Feedback", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("DecalXeAPI.Models.Feedback", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "AssignedEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedEmployeeID");

                    b.HasOne("DecalXeAPI.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DecalXeAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalService", "DecalService")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DecalServiceServiceID");

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalService");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Payment", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Promotion", "Promotion")
                        .WithMany("Payments")
                        .HasForeignKey("PromotionID");

                    b.Navigation("Order");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ScheduledWorkUnit", b =>
                {
                    b.HasOne("DecalXeAPI.Models.TechnicianDailySchedule", "DailySchedule")
                        .WithMany("ScheduledWorkUnits")
                        .HasForeignKey("DailyScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithMany("ScheduledWorkUnits")
                        .HasForeignKey("OrderID");

                    b.HasOne("DecalXeAPI.Models.TimeSlotDefinition", "TimeSlotDefinition")
                        .WithMany("ScheduledWorkUnits")
                        .HasForeignKey("TimeSlotDefinitionSlotDefID");

                    b.Navigation("DailySchedule");

                    b.Navigation("Order");

                    b.Navigation("TimeSlotDefinition");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ServiceDecalTemplate", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalService", "DecalService")
                        .WithMany("ServiceDecalTemplates")
                        .HasForeignKey("DecalServiceServiceID");

                    b.HasOne("DecalXeAPI.Models.DecalTemplate", "DecalTemplate")
                        .WithMany("ServiceDecalTemplates")
                        .HasForeignKey("DecalTemplateTemplateID");

                    b.Navigation("DecalService");

                    b.Navigation("DecalTemplate");
                });

            modelBuilder.Entity("DecalXeAPI.Models.ServiceProduct", b =>
                {
                    b.HasOne("DecalXeAPI.Models.DecalService", "DecalService")
                        .WithMany("ServiceProducts")
                        .HasForeignKey("DecalServiceServiceID");

                    b.HasOne("DecalXeAPI.Models.Product", "Product")
                        .WithMany("ServiceProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecalService");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechnicianDailySchedule", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Employee", "Employee")
                        .WithMany("TechnicianDailySchedules")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Warranty", b =>
                {
                    b.HasOne("DecalXeAPI.Models.Order", "Order")
                        .WithOne("Warranty")
                        .HasForeignKey("DecalXeAPI.Models.Warranty", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Customer", b =>
                {
                    b.Navigation("CustomServiceRequests");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalService", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ServiceDecalTemplates");

                    b.Navigation("ServiceProducts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalTemplate", b =>
                {
                    b.Navigation("ServiceDecalTemplates");
                });

            modelBuilder.Entity("DecalXeAPI.Models.DecalType", b =>
                {
                    b.Navigation("DecalServices");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Employee", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("SalesRequests");

                    b.Navigation("TechnicianDailySchedules");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Order", b =>
                {
                    b.Navigation("CustomServiceRequest");

                    b.Navigation("Design");

                    b.Navigation("Feedback");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("ScheduledWorkUnits");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Product", b =>
                {
                    b.Navigation("ServiceProducts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Promotion", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DecalXeAPI.Models.Store", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TechnicianDailySchedule", b =>
                {
                    b.Navigation("ScheduledWorkUnits");
                });

            modelBuilder.Entity("DecalXeAPI.Models.TimeSlotDefinition", b =>
                {
                    b.Navigation("ScheduledWorkUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
